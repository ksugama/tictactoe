// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tictactoe/game_state.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GameState struct {
	Index   string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	GameId  string   `protobuf:"bytes,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	State   string   `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	TurnX   bool     `protobuf:"varint,4,opt,name=turnX,proto3" json:"turnX,omitempty"`
	PlayerX string   `protobuf:"bytes,5,opt,name=playerX,proto3" json:"playerX,omitempty"`
	PlayerO string   `protobuf:"bytes,6,opt,name=playerO,proto3" json:"playerO,omitempty"`
	Board   []string `protobuf:"bytes,7,rep,name=board,proto3" json:"board,omitempty"`
	Winner  string   `protobuf:"bytes,8,opt,name=winner,proto3" json:"winner,omitempty"`
}

func (m *GameState) Reset()         { *m = GameState{} }
func (m *GameState) String() string { return proto.CompactTextString(m) }
func (*GameState) ProtoMessage()    {}
func (*GameState) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e483d5a3f4470db, []int{0}
}
func (m *GameState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameState.Merge(m, src)
}
func (m *GameState) XXX_Size() int {
	return m.Size()
}
func (m *GameState) XXX_DiscardUnknown() {
	xxx_messageInfo_GameState.DiscardUnknown(m)
}

var xxx_messageInfo_GameState proto.InternalMessageInfo

func (m *GameState) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *GameState) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *GameState) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *GameState) GetTurnX() bool {
	if m != nil {
		return m.TurnX
	}
	return false
}

func (m *GameState) GetPlayerX() string {
	if m != nil {
		return m.PlayerX
	}
	return ""
}

func (m *GameState) GetPlayerO() string {
	if m != nil {
		return m.PlayerO
	}
	return ""
}

func (m *GameState) GetBoard() []string {
	if m != nil {
		return m.Board
	}
	return nil
}

func (m *GameState) GetWinner() string {
	if m != nil {
		return m.Winner
	}
	return ""
}

func init() {
	proto.RegisterType((*GameState)(nil), "ksugama.tictactoe.tictactoe.GameState")
}

func init() { proto.RegisterFile("tictactoe/game_state.proto", fileDescriptor_6e483d5a3f4470db) }

var fileDescriptor_6e483d5a3f4470db = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0xc9, 0x4c, 0x2e,
	0x49, 0x4c, 0x2e, 0xc9, 0x4f, 0xd5, 0x4f, 0x4f, 0xcc, 0x4d, 0x8d, 0x2f, 0x2e, 0x49, 0x2c, 0x49,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xce, 0x2e, 0x2e, 0x4d, 0x4f, 0xcc, 0x4d, 0xd4,
	0x83, 0xab, 0x41, 0xb0, 0x94, 0x8e, 0x33, 0x72, 0x71, 0xba, 0x27, 0xe6, 0xa6, 0x06, 0x83, 0x34,
	0x08, 0x89, 0x70, 0xb1, 0x66, 0xe6, 0xa5, 0xa4, 0x56, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06,
	0x41, 0x38, 0x42, 0x62, 0x5c, 0x6c, 0x20, 0x43, 0x3d, 0x53, 0x24, 0x98, 0xc0, 0xc2, 0x50, 0x1e,
	0x48, 0x35, 0xd8, 0x1e, 0x09, 0x66, 0x88, 0xea, 0x62, 0x98, 0x19, 0x25, 0xa5, 0x45, 0x79, 0x11,
	0x12, 0x2c, 0x0a, 0x8c, 0x1a, 0x1c, 0x41, 0x10, 0x8e, 0x90, 0x04, 0x17, 0x7b, 0x41, 0x4e, 0x62,
	0x65, 0x6a, 0x51, 0x84, 0x04, 0x2b, 0x58, 0x35, 0x8c, 0x8b, 0x90, 0xf1, 0x97, 0x60, 0x43, 0x96,
	0xf1, 0x07, 0x99, 0x94, 0x94, 0x9f, 0x58, 0x94, 0x22, 0xc1, 0xae, 0xc0, 0x0c, 0x32, 0x1f, 0xcc,
	0x01, 0xb9, 0xa6, 0x3c, 0x33, 0x2f, 0x2f, 0xb5, 0x48, 0x82, 0x03, 0xe2, 0x1a, 0x08, 0xcf, 0xc9,
	0xe3, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58,
	0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xf4, 0xd2, 0x33, 0x4b, 0x32,
	0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xa1, 0x61, 0xa1, 0x8f, 0x08, 0xaf, 0x0a, 0x24, 0x76,
	0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0x38, 0xdc, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x11, 0xb4, 0x9d, 0x58, 0x55, 0x01, 0x00, 0x00,
}

func (m *GameState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Winner) > 0 {
		i -= len(m.Winner)
		copy(dAtA[i:], m.Winner)
		i = encodeVarintGameState(dAtA, i, uint64(len(m.Winner)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Board) > 0 {
		for iNdEx := len(m.Board) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Board[iNdEx])
			copy(dAtA[i:], m.Board[iNdEx])
			i = encodeVarintGameState(dAtA, i, uint64(len(m.Board[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PlayerO) > 0 {
		i -= len(m.PlayerO)
		copy(dAtA[i:], m.PlayerO)
		i = encodeVarintGameState(dAtA, i, uint64(len(m.PlayerO)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PlayerX) > 0 {
		i -= len(m.PlayerX)
		copy(dAtA[i:], m.PlayerX)
		i = encodeVarintGameState(dAtA, i, uint64(len(m.PlayerX)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TurnX {
		i--
		if m.TurnX {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintGameState(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GameId) > 0 {
		i -= len(m.GameId)
		copy(dAtA[i:], m.GameId)
		i = encodeVarintGameState(dAtA, i, uint64(len(m.GameId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintGameState(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGameState(dAtA []byte, offset int, v uint64) int {
	offset -= sovGameState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GameState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovGameState(uint64(l))
	}
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovGameState(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovGameState(uint64(l))
	}
	if m.TurnX {
		n += 2
	}
	l = len(m.PlayerX)
	if l > 0 {
		n += 1 + l + sovGameState(uint64(l))
	}
	l = len(m.PlayerO)
	if l > 0 {
		n += 1 + l + sovGameState(uint64(l))
	}
	if len(m.Board) > 0 {
		for _, s := range m.Board {
			l = len(s)
			n += 1 + l + sovGameState(uint64(l))
		}
	}
	l = len(m.Winner)
	if l > 0 {
		n += 1 + l + sovGameState(uint64(l))
	}
	return n
}

func sovGameState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGameState(x uint64) (n int) {
	return sovGameState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GameState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnX", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TurnX = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerX", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerX = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerO", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerO = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Board", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Board = append(m.Board, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Winner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGameState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGameState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGameState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGameState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGameState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGameState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGameState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGameState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGameState = fmt.Errorf("proto: unexpected end of group")
)
